
#user  nobody;
worker_processes  1;

#error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid     /var/log/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    resolver 223.5.5.5;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  blog_system;

        #charset koi8-r;

        access_log  /var/log/nginx/blog_system.access.log  main;
        error_log   /var/log/nginx/blog_system.error.log;

        location ~ /oss/(.*) {
            resolver 223.5.5.5;
            set $ossproxy '';
            # must do set
            set $remainder $1;
            access_by_lua_block {
                local cjson = require "cjson"
                -- 必须绝对路径
                local file, msg = io.open("/usr/local/openresty/nginx/conf/config", "r")
                local content = file:read("*all")
                local config = cjson.decode(content);

                -- 设置重定向的url
                local bucket = config["UPLOAD2OSS"]["bucket"]
                local endpoint = config["UPLOAD2OSS"]["endpoint"]
                ngx.var.ossproxy=bucket .. "." .. endpoint
            }
            # content_by_lua_block {
            # 在content prase阶段，由于走的代理本质是upstream，
            # 所以会走balancer_by_lua,这里的逻辑不会被执行
            # 只能通过body_filter去替换
            #     if ngx.status ~= ngx.HTTP_OK then
            #         ngx.say("This is our own content")
            #         ngx.flush(true)
            #         ngx.exit(ngx.HTTP_NOT_FOUND)
            #     end
            # }
            header_filter_by_lua_block {
                -- 流式处理，header会比body先完成发送
                -- 由于body阶段会改变内容，导致长度变化，
                -- 所以修改content_length，使chunk方式返回
                if ngx.status ~= 200 then
                    -- ngx.status = 403
                    ngx.header.content_length = nil
                end
            }
            body_filter_by_lua_block {
                if ngx.status == 200 then
                    return 0
                end
                local chunk, eof = ngx.arg[1], ngx.arg[2]
                if ngx.ctx.buffered == nil then
                    ngx.ctx.buffered = {}
                end
                -- 如果非最后一次响应，将当前响应赋值
                if chunk ~= "" and not ngx.is_subrequest then
                    table.insert(ngx.ctx.buffered, chunk)
                    -- 将当前响应赋值为空，以修改后的内容作为最终响应
                    ngx.arg[1] = nil
                end
                -- 如果为最后一次响应，对所有响应数据进行处理
                if eof then
                    -- 获取所有响应数据
                    local whole = table.concat(ngx.ctx.buffered)
                    ngx.ctx.buffered = nil

                    -- 进行你所需要进行的处理
                    local newstr, n, err = ngx.re.gsub(whole, "<HostId>(.*)</HostId>", "<HostId>www.noinf.com</HostId>", "i")

                    -- 重新赋值响应数据，以修改后的内容作为最终响应
                    ngx.arg[1] = newstr
                end
            }
            # if ($request_uri ~* ^/oss/(.*)$){
                # 这样是不行的，因为浏览器请求URI中的非ASCII码被UTF-8编码为%xx格式
                # 这里拿到的$1不会解码，导致请求到OSS的就是编码后的%XX的字符，无法匹配
                # 需要的就是nginx的自动编解码
                # proxy_pass http://$ossproxy/$1;
            # }
            proxy_pass http://$ossproxy/$remainder;
            if ($request_method !~* GET) {
                return 403;
            }
        }
        location / {
            include uwsgi_params;
            #uwsgi_pass  unix:///run/uwsgi/blogsrv.sock;
            uwsgi_pass 127.0.0.1:8000;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}