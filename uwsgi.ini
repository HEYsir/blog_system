[uwsgi]
# Ubuntu系统下默认用户名
uid=root
# Ubuntu系统下默认用户组
gid=root
# 项目名
project=blog_system 
# 项目根目录
base = %D 

# 设置项目虚拟环境,Docker部署时不需要
home = %(base)pyenv/
# 设置工作目录，在app加载前切换到当前目录
chdir=%(base)

# 监控项目的py文件的mtime来触发重载 (只在开发时使用)，py-autoreload表示多长时间检测一次，单位秒
; py-autoreload=1 

# wsgi文件
; wsgi-file = wsgi.py
# 该对象就是一个wsgi接口，如Flask中的app
; callable = WSGIHandler

# 在每个worker而不是master中加载应用。默认为false，表示先加载应用，再fork出worker，这样做可以让work尽量共用内存，只有当写时才copy
# 由于先加载再fork，但有些东西是不支持fork的，比如socket连接，所以lazy-apps=false时，不要在加载应用时自动创建数据库连接等
# eg:如果使用SQLAlchemy，可能需要设置，https://blog.csdn.net/weixin_43262264/article/details/106078784
# 官方对这个争议的应用说明：https://uwsgi-docs.readthedocs.io/en/latest/articles/TheArtOfGracefulReloading.html?highlight=lazy-apps#preforking-vs-lazy-apps-vs-lazy
# 中文翻译：https://blog.csdn.net/cnweike/article/details/79611041?utm_source=blogxgwz7
; lazy-apps=true

# wsgi文件位置
module=%(project).wsgi:application 

# 主进程,启用process manager，管理worker进程，worker进程都是这个master进程的子进程
master=True
# 同时进行的进程数，一般核*2
processes=2 
# 每个worker进程中创建两个线程
; threades = 2
# 这个参数不会影响app内创建线程，只影响wsgi内部的api，默认值为false。可以认为对用户无影响，使用默认值即可。参见 https://github.com/unbit/uwsgi/issues/1141
; enable-threads = true

# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
; socket=/run/uwsgi/%(project).sock

# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
; socket=0.0.0.0:8000

# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
http=0.0.0.0:8000

# socket权限设置
chown-socket=%(uid):root
chmod-socket=664

# 进程文件
pidfile=/tmp/%(project)-master.pid

# 以后台守护进程运行，并将log日志存于temp文件夹。
daemonize=/var/log/uwsgi/%(project).log 
# 设置日志文件最大50M,单位B
log-maxsize = 5000000
# 禁用请求日志记录
disable-logging = true

# 服务停止时，自动移除unix socket和pid文件
vacuum=True
# 设置socket的监听队列大小（默认：100）
listen = 120
# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
# 可以使用这个选项来默默地对抗内存泄漏
max-requests=5000


# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
# 并且当前处理这个请求的工作进程会被回收再利用（即重启）
harakiri=60

#当一个请求被harakiri杀掉会，会输出一条日志
harakiri-verbose=true

# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size=65536

# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering=65536

#开启内存使用情况报告
memory-report=true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
#这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy=10

#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as=1024

# 通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。
# 这个配置会限制uWSGI的进程占用虚拟内存不超过256M。
# 如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
; limit-as = 256 