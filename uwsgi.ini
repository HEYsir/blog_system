[uwsgi]
; =============================== 配置运行虚拟环境及程序路径 ===============================
; 项目名
project=blog_system 
; 项目根目录
base = %D 
; 设置项目虚拟环境venv（pyhome、home、virtualenv都是别名）Docker部署时不需要
venv = %(base)pyenv/
; 设置工作目录，在app加载前切换到当前目录
chdir=%(base)
static-map = /static=%(base)collect_static/
; wsgi文件（别名 file ）
wsgi-file = %(project)/wsgi.py
; wsgi文件位置
module=%(project).wsgi:application 
; # 该对象就是一个wsgi接口，如Flask中的app
; callable = WSGIHandler

; 开启状态监控
stats = 127.0.0.1:9191

; =============================== 网络服务配置 ===============================
; # 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
; # Nginx配置中uwsgi_pass应指向同一socket文件
; uwsgi-socket=/run/uwsgi/blogsrv.sock

; # 选项2，使用TCP socket与nginx通信
; # Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
socket=127.0.0.1:8000

; # 选项3，使用http协议与nginx通信
; # Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
; http=0.0.0.0:8000

; ; 打开 https 强制转换, 安全协议设置为 HIGH
; http-to-https = =0
; https = =1,214391966620557.pem,214391966620557.key,HIGH

; # socket权限设置
chown-socket=%(uid):root
chmod-socket=664

; # 设置socket的监听队列大小（默认：100）
listen = 120

; 在绑定端口后切换运行用户
uid=root
gid=root

; =============================== uWSGI工作参数配置 ===============================
; # 服务停止时，自动移除unix socket和pid文件
vacuum=True

; # 进程文件，方便用 --stop 或者 --reload
pidfile=uwsgi.pid
; 除了 pidfile 也同时使用 Master Fifo 来管理进程
; http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/MasterFIFO.html
; 如果使用 supervisor 管理进程，是否使用 master-fifo 则可以自行选择，这是对 uwsgi 进行高级管理的好办法
master-fifo = %d%n.fifo

; # 监控项目的py文件的mtime来触发重载 (只在开发时使用)，py-autoreload表示多长时间检测一次，单位秒
; py-autoreload=1 

; # 在每个worker而不是master中加载应用。默认为false，表示先加载应用，再fork出worker，这样做可以让work尽量共用内存，只有当写时才copy
; # 由于先加载再fork，但有些东西是不支持fork的，比如socket连接，所以lazy-apps=false时，不要在加载应用时自动创建数据库连接等
; # eg:如果使用SQLAlchemy，可能需要设置，https://blog.csdn.net/weixin_43262264/article/details/106078784
; # 官方对这个争议的应用说明：https://uwsgi-docs.readthedocs.io/en/latest/articles/TheArtOfGracefulReloading.html?highlight=lazy-apps#preforking-vs-lazy-apps-vs-lazy
; # 中文翻译：https://blog.csdn.net/cnweike/article/details/79611041?utm_source=blogxgwz7
; lazy-apps=true

; 当设定了 max-request 的时候，到达值后 worker 会重启
; http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/Options.html?highlight=max-requests
; 如果没有 master，重启将不会实现
; http://stackoverflow.com/a/5430522/154234
# 主进程,启用process manager，管理worker进程，worker进程都是这个master进程的子进程
master=True
; # 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
; # 可以使用这个选项来默默地对抗内存泄漏
max-requests=5000

# 同时进行的进程数，一般核*2
processes=2 
; ; 这个参数不会影响app内创建线程，只影响wsgi内部的api，默认值为false。
; ; 允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
; ; 可以认为对用户无影响，使用默认值即可。参见 https://github.com/unbit/uwsgi/issues/1141
; enable-threads = true
; # 每个worker进程中创建两个线程
; http://uwsgi-docs.readthedocs.io/en/latest/ThingsToKnow.html
; 启用了多线程模式后，自动开启线程支持，因此上面的  enabled-threads 不用设置
threads = 2

; 防止惊群效应
; http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/articles/SerializingAccept.html
thunder_lock = true

; #开启内存使用情况报告
memory-report=true

; #设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
; #这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy=10

; #设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as=1024

; # 通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。
; # 这个配置会限制uWSGI的进程占用虚拟内存不超过256M。
; # 如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
; limit-as = 256 

; =============================== uWSGI日志配置  ===============================
; # 重要!重要！重要！关于日志相关的配置，建议查看 https://blog.zengrong.net/post/uwsgi-log/ 及其相关的文章

; # 保证以后台守护进程运行，这个选项配置的日志地址
; # 如果不配置 daemonize，uWSGI 会在前台运行，日志输入到 STDOUT
; # 这种情况下，建议用 Supervisor 来管理 uWSGI 进程。 因为 Sueprvisor 要求被管理的程序 必须运行在非守护模式。
; # 当使用了 Supervisor 来管理进程后，uWSGI 输入到 STDOUT 的日志会被 Supervisor 的日志系统接管
; # 如果使用 Supervisor 来管理 uWSGI，又不希望 Supervisor 来接管日志，logto 就能排上用场了。
; # 如果这么看，docker下可以选择不配置，这样在服务异常后可以通过docker重新自动运行
daemonize = /var/log/uwsgi/%(project).log 
# log 在 master 中处理, 且必须配置 log-master 才支持 logreopen
log-master = true
# 如果使用 Supervisor来管理uWSGI，又不希望Supervisor来接管日志，配置logto 
logto = /var/log/uwsgi/%(project).log 

; # 设置日志文件最大50M,单位B
log-maxsize = 5000000
; # 禁用请求日志记录
disable-logging = true
; # 当启动时切分日志
log-truncate = true

; # 使用单独的线程处理插件化 logger
threaded-logger = true
; # 将日志打印到syslog上,开启后不会收集到日志文件
; log-syslog = true


; =============================== uWSGI请求配置  ===============================
; # 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
; # 并且当前处理这个请求的工作进程会被回收再利用（即重启）
; # 文件上传超时怎么处理
; harakiri=60

; #当一个请求被harakiri杀掉会，会输出一条日志
; harakiri-verbose=true

; # 设置socket超时时间，用于和nginx通过socket连接，
; # 实际这个值不设置好像没有超时时间，至少是TCP本身的超时
; socket-timeout = 30

; # 用于直接提供http接口
; http-timeout = 30

; # uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size=65536
; # 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering=65536

; # 这里是nginx的配置，临时记录
; uwsgi_read_timeout = 600 # 读取nginx发送请求时间
; uwsgi_send_timeout = 600 # 发送请求到nginx时间


